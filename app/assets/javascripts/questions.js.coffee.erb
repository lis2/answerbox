# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://jashkenas.github.com/coffee-script/
$ ->
  faye = new Faye.Client("http://127.0.0.1:<%= ENV["FAYEPORT"] %>/faye")
  filtering_enabled = true

  if $(".pagination").length
    $tags = $("#tags")
    if $tags.length > 0
      $tags.observe_field 0.1, () ->
        search_value = $tags.val()
        filtering_enabled = $.isEmptyObject(search_value)
        filter_route = "<%= Rails.application.routes.url_helpers.filter_questions_path %>"
        $.ajax
          url: filter_route
          type: "POST"
          data:
            search: search_value
        .error ->
          alert "Error occured"

    $(window).scroll ->
      if filtering_enabled
        url = $('.pagination .next_page').attr('href')
        if url && $(window).scrollTop() > $(document).height() - $(window).height() - 50
          $('.pagination').text("Fetching more products...")
          $.getScript(url)
    $(window).scroll()

  if ($(".container-fluid.index").size() > 0)
    question_subscription = faye.subscribe "/questions", (message) ->
      console.log message
      $nav = $("ul.nav")
      if not $nav.find("#nq_reload").length
        element = """
        <li>
          <a href="<%= Rails.application.routes.url_helpers.root_path %>"><p class="text-info">New questions</p></a>
        </li>
        """
        $nav.append($(element))

  $dq = $("div[data-question]")
  if $dq.length > 0
    question_id = $dq.attr("data-question")

    subscription = faye.subscribe "/questions/#{question_id}", (message) ->
      console.log message
      $all_answers  = $(".all_answers")
      $all_answers.append($(message.fresh_answer)) if message.fresh_answer?

    comment_subscription = faye.subscribe "/questions/#{question_id}/comments",(message) ->
      if not $("*[data-id=#{message.comment_id}]").length
        console.log message
        $("#answer_list").append(message.rendered_comment)

